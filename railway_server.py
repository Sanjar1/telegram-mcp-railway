import os import asyncio import logging from typing import Dict, Any from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route, Mount from starlette.middleware.cors import CORSMiddleware from sse_starlette.sse import EventSourceResponse import uvicorn # Import your existing MCP server from main import app as mcp_app # Configure logging logging.basicConfig(level=logging.INFO) logger = logging.getLogger(__name__)
 class RailwayMCPServer: def __init__(self): self.mcp_app = mcp_app async def health_check(self, request): "Health check endpoint for Railway" return JSONResponse({ "status": "healthy", "service": "telegram-mcp", "timestamp": str(asyncio.get_event_loop().time()) })
 async def mcp_endpoint(self, request): "Main MCP endpoint with SSE support" try: # Handle MCP protocol requests if request.headers.get("accept") == "text/event-stream": return await self.handle_sse(request) else: return await self.handle_http(request) except Exception as e: logger.error(f"MCP endpoint error: {e}") return JSONResponse({"error": str(e)}, status_code=500)
 async def handle_sse(self, request): "Handle Server-Sent Events for real-time MCP" async def event_stream(): try: # Your MCP app logic here yield {"data": '{"jsonrpc": "2.0", "id": 1, "result": {"capabilities": {"tools": {}}}}'} except Exception as e: yield {"data": f'{"error": "{str(e)}"}'} return EventSourceResponse(event_stream())
 async def handle_http(self, request): "Handle regular HTTP requests" try: body = await request.json() if request.method == "POST" else {} # Process with your existing MCP logic result = {"status": "processed", "request": body} return JSONResponse(result) except Exception as e: return JSONResponse({"error": str(e)}, status_code=500)
 # Create Railway app def create_app(): # Initialize MCP server mcp_server = RailwayMCPServer() # Define routes routes = [ Route("/", mcp_server.health_check, methods=["GET"]), Route("/health", mcp_server.health_check, methods=["GET"]), Route("/mcp", mcp_server.mcp_endpoint, methods=["GET", "POST"]), Route("/api/mcp", mcp_server.mcp_endpoint, methods=["GET", "POST"]), ] # Create Starlette app app = Starlette(routes=routes) # Add CORS middleware for Claude web access app.add_middleware( CORSMiddleware, allow_origins=["https://claude.ai", "https://www.claude.ai", "*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"], ) return app # Create the app app = create_app() if __name__ == "__main__": port = int(os.environ.get("PORT", 8000)) uvicorn.run(app, host="0.0.0.0", port=port)
